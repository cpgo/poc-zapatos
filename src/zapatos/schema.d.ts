/*
** DON'T EDIT THIS FILE **
It's been generated by Zapatos (v3.3.0), and is liable to be overwritten

Zapatos: https://jawj.github.io/zapatos/
Copyright (C) 2020 George MacKerron
Released under the MIT licence: see LICENCE file
*/

declare module 'zapatos/schema' {

  import type * as db from 'zapatos/db';

  // got a type error on schemaVersionCanary below? update by running `npx zapatos`
  export interface schemaVersionCanary extends db.SchemaVersionCanary { version: 101 }

  type JSONSelectableFromSelectable<T> = { [K in keyof T]:
    Date extends T[K] ? Exclude<T[K], Date> | db.DateString :
    Date[] extends T[K] ? Exclude<T[K], Date[]> | db.DateString[] :
    T[K]
  };

  /* === schema: public === */

  /* --- enums --- */


  /* --- tables --- */

  export namespace schema_migrations {
    export type Table = 'schema_migrations';
    export interface Selectable {
      version: string;
    }
    export interface Whereable {
      version?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      version: string | db.Parameter<string> | db.SQLFragment;
    }
    export interface Updatable {
      version?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
    }
    export interface JSONSelectable extends JSONSelectableFromSelectable<Selectable> { }
    export type UniqueIndex = 'schema_migrations_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  export namespace users {
    export type Table = 'users';
    export interface Selectable {
      id: number;
      name: string;
    }
    export interface Whereable {
      id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      name: string | db.Parameter<string> | db.SQLFragment;
    }
    export interface Updatable {
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      name?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
    }
    export interface JSONSelectable extends JSONSelectableFromSelectable<Selectable> { }
    export type UniqueIndex = 'users_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /* === cross-table types === */

  export type Table = schema_migrations.Table | users.Table;
  export type Selectable = schema_migrations.Selectable | users.Selectable;
  export type Whereable = schema_migrations.Whereable | users.Whereable;
  export type Insertable = schema_migrations.Insertable | users.Insertable;
  export type Updatable = schema_migrations.Updatable | users.Updatable;
  export type UniqueIndex = schema_migrations.UniqueIndex | users.UniqueIndex;
  export type Column = schema_migrations.Column | users.Column;
  export type AllTables = [schema_migrations.Table, users.Table];
  export type AllMaterializedViews = [];


  export type SelectableForTable<T extends Table> = {
    schema_migrations: schema_migrations.Selectable;
    users: users.Selectable;
  }[T];

  export type WhereableForTable<T extends Table> = {
    schema_migrations: schema_migrations.Whereable;
    users: users.Whereable;
  }[T];

  export type InsertableForTable<T extends Table> = {
    schema_migrations: schema_migrations.Insertable;
    users: users.Insertable;
  }[T];

  export type UpdatableForTable<T extends Table> = {
    schema_migrations: schema_migrations.Updatable;
    users: users.Updatable;
  }[T];

  export type UniqueIndexForTable<T extends Table> = {
    schema_migrations: schema_migrations.UniqueIndex;
    users: users.UniqueIndex;
  }[T];

  export type ColumnForTable<T extends Table> = {
    schema_migrations: schema_migrations.Column;
    users: users.Column;
  }[T];

  export type SQLForTable<T extends Table> = {
    schema_migrations: schema_migrations.SQL;
    users: users.SQL;
  }[T];

}
