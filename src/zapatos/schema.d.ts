/*
** DON'T EDIT THIS FILE **
It's been generated by Zapatos (v3.4.0), and is liable to be overwritten

Zapatos: https://jawj.github.io/zapatos/
Copyright (C) 2020 George MacKerron
Released under the MIT licence: see LICENCE file
*/

declare module 'zapatos/schema' {

  import type * as db from 'zapatos/db';

  // got a type error on schemaVersionCanary below? update by running `npx zapatos`
  export interface schemaVersionCanary extends db.SchemaVersionCanary { version: 101 }

  type JSONSelectableFromSelectable<T> = { [K in keyof T]:
    Date extends T[K] ? Exclude<T[K], Date> | db.DateString :
    Date[] extends T[K] ? Exclude<T[K], Date[]> | db.DateString[] :
    T[K]
  };

  /* === schema: public === */

  /* --- enums --- */


  /* --- tables --- */

  export namespace cd_configurations {
    export type Table = 'cd_configurations';
    export interface Selectable {
      /**
      * **cd_configurations.id**
      * - `uuid` in database
      * - `NOT NULL`, default: `gen_random_uuid()`
      */
      id: string;
      /**
      * **cd_configurations.name**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      name: string;
      /**
      * **cd_configurations.configuration_data**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      configuration_data: string;
      /**
      * **cd_configurations.user_id**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      user_id: string;
      /**
      * **cd_configurations.workspace_id**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      workspace_id: string;
      /**
      * **cd_configurations.created_at**
      * - `timestamp` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at: Date;
      /**
      * **cd_configurations.type**
      * - `varchar` in database
      * - Nullable, no default
      */
      type: string | null;
    }
    export interface Whereable {
      /**
      * **cd_configurations.id**
      * - `uuid` in database
      * - `NOT NULL`, default: `gen_random_uuid()`
      */
      id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **cd_configurations.name**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **cd_configurations.configuration_data**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      configuration_data?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **cd_configurations.user_id**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      user_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **cd_configurations.workspace_id**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      workspace_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **cd_configurations.created_at**
      * - `timestamp` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at?: Date | db.Parameter<Date> | db.DateString | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, Date | db.Parameter<Date> | db.DateString | db.SQLFragment | db.ParentColumn>;
      /**
      * **cd_configurations.type**
      * - `varchar` in database
      * - Nullable, no default
      */
      type?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **cd_configurations.id**
      * - `uuid` in database
      * - `NOT NULL`, default: `gen_random_uuid()`
      */
      id?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment;
      /**
      * **cd_configurations.name**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      name: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **cd_configurations.configuration_data**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      configuration_data: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **cd_configurations.user_id**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      user_id: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **cd_configurations.workspace_id**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      workspace_id: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **cd_configurations.created_at**
      * - `timestamp` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at?: Date | db.Parameter<Date> | db.DateString | db.DefaultType | db.SQLFragment;
      /**
      * **cd_configurations.type**
      * - `varchar` in database
      * - Nullable, no default
      */
      type?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **cd_configurations.id**
      * - `uuid` in database
      * - `NOT NULL`, default: `gen_random_uuid()`
      */
      id?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.DefaultType | db.SQLFragment>;
      /**
      * **cd_configurations.name**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      name?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **cd_configurations.configuration_data**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      configuration_data?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **cd_configurations.user_id**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      user_id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **cd_configurations.workspace_id**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      workspace_id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **cd_configurations.created_at**
      * - `timestamp` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at?: Date | db.Parameter<Date> | db.DateString | db.DefaultType | db.SQLFragment | db.SQLFragment<any, Date | db.Parameter<Date> | db.DateString | db.DefaultType | db.SQLFragment>;
      /**
      * **cd_configurations.type**
      * - `varchar` in database
      * - Nullable, no default
      */
      type?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
    }
    export interface JSONSelectable extends JSONSelectableFromSelectable<Selectable> { }
    export type UniqueIndex = 'PK_144238f578afbf2be3d2d089374';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  export namespace schema_migrations {
    export type Table = 'schema_migrations';
    export interface Selectable {
      /**
      * **schema_migrations.version**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      version: string;
    }
    export interface Whereable {
      /**
      * **schema_migrations.version**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      version?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **schema_migrations.version**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      version: string | db.Parameter<string> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **schema_migrations.version**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      version?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
    }
    export interface JSONSelectable extends JSONSelectableFromSelectable<Selectable> { }
    export type UniqueIndex = 'schema_migrations_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  export namespace v2components {
    export type Table = 'v2components';
    export interface Selectable {
      /**
      * **v2components.id**
      * - `uuid` in database
      * - `NOT NULL`, default: `gen_random_uuid()`
      */
      id: string;
      /**
      * **v2components.deployment_id**
      * - `uuid` in database
      * - `NOT NULL`, default: `gen_random_uuid()`
      */
      deployment_id: string;
      /**
      * **v2components.component_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      component_id: string;
      /**
      * **v2components.name**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      name: string;
      /**
      * **v2components.image_url**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      image_url: string;
      /**
      * **v2components.image_tag**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      image_tag: string;
      /**
      * **v2components.helm_url**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      helm_url: string;
      /**
      * **v2components.host_value**
      * - `varchar` in database
      * - Nullable, no default
      */
      host_value: string | null;
      /**
      * **v2components.gateway_name**
      * - `varchar` in database
      * - Nullable, no default
      */
      gateway_name: string | null;
      /**
      * **v2components.running**
      * - `bool` in database
      * - `NOT NULL`, default: `false`
      */
      running: boolean;
      /**
      * **v2components.merged**
      * - `bool` in database
      * - `NOT NULL`, default: `false`
      */
      merged: boolean;
      /**
      * **v2components.created_at**
      * - `timestamp` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at: Date;
      /**
      * **v2components.manifests**
      * - `jsonb` in database
      * - Nullable, no default
      */
      manifests: db.JSONValue | null;
    }
    export interface Whereable {
      /**
      * **v2components.id**
      * - `uuid` in database
      * - `NOT NULL`, default: `gen_random_uuid()`
      */
      id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **v2components.deployment_id**
      * - `uuid` in database
      * - `NOT NULL`, default: `gen_random_uuid()`
      */
      deployment_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **v2components.component_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      component_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **v2components.name**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **v2components.image_url**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      image_url?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **v2components.image_tag**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      image_tag?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **v2components.helm_url**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      helm_url?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **v2components.host_value**
      * - `varchar` in database
      * - Nullable, no default
      */
      host_value?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **v2components.gateway_name**
      * - `varchar` in database
      * - Nullable, no default
      */
      gateway_name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **v2components.running**
      * - `bool` in database
      * - `NOT NULL`, default: `false`
      */
      running?: boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn>;
      /**
      * **v2components.merged**
      * - `bool` in database
      * - `NOT NULL`, default: `false`
      */
      merged?: boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn>;
      /**
      * **v2components.created_at**
      * - `timestamp` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at?: Date | db.Parameter<Date> | db.DateString | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, Date | db.Parameter<Date> | db.DateString | db.SQLFragment | db.ParentColumn>;
      /**
      * **v2components.manifests**
      * - `jsonb` in database
      * - Nullable, no default
      */
      manifests?: db.JSONValue | db.Parameter<db.JSONValue> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, db.JSONValue | db.Parameter<db.JSONValue> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **v2components.id**
      * - `uuid` in database
      * - `NOT NULL`, default: `gen_random_uuid()`
      */
      id?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment;
      /**
      * **v2components.deployment_id**
      * - `uuid` in database
      * - `NOT NULL`, default: `gen_random_uuid()`
      */
      deployment_id?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment;
      /**
      * **v2components.component_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      component_id: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **v2components.name**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      name: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **v2components.image_url**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      image_url: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **v2components.image_tag**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      image_tag: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **v2components.helm_url**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      helm_url: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **v2components.host_value**
      * - `varchar` in database
      * - Nullable, no default
      */
      host_value?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **v2components.gateway_name**
      * - `varchar` in database
      * - Nullable, no default
      */
      gateway_name?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **v2components.running**
      * - `bool` in database
      * - `NOT NULL`, default: `false`
      */
      running?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment;
      /**
      * **v2components.merged**
      * - `bool` in database
      * - `NOT NULL`, default: `false`
      */
      merged?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment;
      /**
      * **v2components.created_at**
      * - `timestamp` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at?: Date | db.Parameter<Date> | db.DateString | db.DefaultType | db.SQLFragment;
      /**
      * **v2components.manifests**
      * - `jsonb` in database
      * - Nullable, no default
      */
      manifests?: db.JSONValue | db.Parameter<db.JSONValue> | null | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **v2components.id**
      * - `uuid` in database
      * - `NOT NULL`, default: `gen_random_uuid()`
      */
      id?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.DefaultType | db.SQLFragment>;
      /**
      * **v2components.deployment_id**
      * - `uuid` in database
      * - `NOT NULL`, default: `gen_random_uuid()`
      */
      deployment_id?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.DefaultType | db.SQLFragment>;
      /**
      * **v2components.component_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      component_id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **v2components.name**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      name?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **v2components.image_url**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      image_url?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **v2components.image_tag**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      image_tag?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **v2components.helm_url**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      helm_url?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **v2components.host_value**
      * - `varchar` in database
      * - Nullable, no default
      */
      host_value?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **v2components.gateway_name**
      * - `varchar` in database
      * - Nullable, no default
      */
      gateway_name?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **v2components.running**
      * - `bool` in database
      * - `NOT NULL`, default: `false`
      */
      running?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment>;
      /**
      * **v2components.merged**
      * - `bool` in database
      * - `NOT NULL`, default: `false`
      */
      merged?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment>;
      /**
      * **v2components.created_at**
      * - `timestamp` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at?: Date | db.Parameter<Date> | db.DateString | db.DefaultType | db.SQLFragment | db.SQLFragment<any, Date | db.Parameter<Date> | db.DateString | db.DefaultType | db.SQLFragment>;
      /**
      * **v2components.manifests**
      * - `jsonb` in database
      * - Nullable, no default
      */
      manifests?: db.JSONValue | db.Parameter<db.JSONValue> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, db.JSONValue | db.Parameter<db.JSONValue> | null | db.DefaultType | db.SQLFragment>;
    }
    export interface JSONSelectable extends JSONSelectableFromSelectable<Selectable> { }
    export type UniqueIndex = 'v2components_pkey' | 'only_one_module_running';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  export namespace v2deployments {
    export type Table = 'v2deployments';
    export interface Selectable {
      /**
      * **v2deployments.id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      id: string;
      /**
      * **v2deployments.author_id**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      author_id: string;
      /**
      * **v2deployments.callback_url**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      callback_url: string;
      /**
      * **v2deployments.circle_id**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      circle_id: string;
      /**
      * **v2deployments.current**
      * - `bool` in database
      * - `NOT NULL`, default: `false`
      */
      current: boolean;
      /**
      * **v2deployments.priority**
      * - `int4` in database
      * - `NOT NULL`, default: `0`
      */
      priority: number;
      /**
      * **v2deployments.cd_configuration_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      cd_configuration_id: string;
      /**
      * **v2deployments.created_at**
      * - `timestamp` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at: Date;
      /**
      * **v2deployments.default_circle**
      * - `bool` in database
      * - `NOT NULL`, no default
      */
      default_circle: boolean;
      /**
      * **v2deployments.previous_deployment_id**
      * - `uuid` in database
      * - Nullable, no default
      */
      previous_deployment_id: string | null;
      /**
      * **v2deployments.healthy**
      * - `bool` in database
      * - `NOT NULL`, default: `false`
      */
      healthy: boolean;
      /**
      * **v2deployments.routed**
      * - `bool` in database
      * - `NOT NULL`, default: `false`
      */
      routed: boolean;
    }
    export interface Whereable {
      /**
      * **v2deployments.id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **v2deployments.author_id**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      author_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **v2deployments.callback_url**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      callback_url?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **v2deployments.circle_id**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      circle_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **v2deployments.current**
      * - `bool` in database
      * - `NOT NULL`, default: `false`
      */
      current?: boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn>;
      /**
      * **v2deployments.priority**
      * - `int4` in database
      * - `NOT NULL`, default: `0`
      */
      priority?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **v2deployments.cd_configuration_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      cd_configuration_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **v2deployments.created_at**
      * - `timestamp` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at?: Date | db.Parameter<Date> | db.DateString | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, Date | db.Parameter<Date> | db.DateString | db.SQLFragment | db.ParentColumn>;
      /**
      * **v2deployments.default_circle**
      * - `bool` in database
      * - `NOT NULL`, no default
      */
      default_circle?: boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn>;
      /**
      * **v2deployments.previous_deployment_id**
      * - `uuid` in database
      * - Nullable, no default
      */
      previous_deployment_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **v2deployments.healthy**
      * - `bool` in database
      * - `NOT NULL`, default: `false`
      */
      healthy?: boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn>;
      /**
      * **v2deployments.routed**
      * - `bool` in database
      * - `NOT NULL`, default: `false`
      */
      routed?: boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **v2deployments.id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      id: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **v2deployments.author_id**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      author_id: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **v2deployments.callback_url**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      callback_url: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **v2deployments.circle_id**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      circle_id: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **v2deployments.current**
      * - `bool` in database
      * - `NOT NULL`, default: `false`
      */
      current?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment;
      /**
      * **v2deployments.priority**
      * - `int4` in database
      * - `NOT NULL`, default: `0`
      */
      priority?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      /**
      * **v2deployments.cd_configuration_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      cd_configuration_id: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **v2deployments.created_at**
      * - `timestamp` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at?: Date | db.Parameter<Date> | db.DateString | db.DefaultType | db.SQLFragment;
      /**
      * **v2deployments.default_circle**
      * - `bool` in database
      * - `NOT NULL`, no default
      */
      default_circle: boolean | db.Parameter<boolean> | db.SQLFragment;
      /**
      * **v2deployments.previous_deployment_id**
      * - `uuid` in database
      * - Nullable, no default
      */
      previous_deployment_id?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **v2deployments.healthy**
      * - `bool` in database
      * - `NOT NULL`, default: `false`
      */
      healthy?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment;
      /**
      * **v2deployments.routed**
      * - `bool` in database
      * - `NOT NULL`, default: `false`
      */
      routed?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **v2deployments.id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **v2deployments.author_id**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      author_id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **v2deployments.callback_url**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      callback_url?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **v2deployments.circle_id**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      circle_id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **v2deployments.current**
      * - `bool` in database
      * - `NOT NULL`, default: `false`
      */
      current?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment>;
      /**
      * **v2deployments.priority**
      * - `int4` in database
      * - `NOT NULL`, default: `0`
      */
      priority?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      /**
      * **v2deployments.cd_configuration_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      cd_configuration_id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **v2deployments.created_at**
      * - `timestamp` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at?: Date | db.Parameter<Date> | db.DateString | db.DefaultType | db.SQLFragment | db.SQLFragment<any, Date | db.Parameter<Date> | db.DateString | db.DefaultType | db.SQLFragment>;
      /**
      * **v2deployments.default_circle**
      * - `bool` in database
      * - `NOT NULL`, no default
      */
      default_circle?: boolean | db.Parameter<boolean> | db.SQLFragment | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.SQLFragment>;
      /**
      * **v2deployments.previous_deployment_id**
      * - `uuid` in database
      * - Nullable, no default
      */
      previous_deployment_id?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **v2deployments.healthy**
      * - `bool` in database
      * - `NOT NULL`, default: `false`
      */
      healthy?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment>;
      /**
      * **v2deployments.routed**
      * - `bool` in database
      * - `NOT NULL`, default: `false`
      */
      routed?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment>;
    }
    export interface JSONSelectable extends JSONSelectableFromSelectable<Selectable> { }
    export type UniqueIndex = 'unique_deployments_id' | 'IDX_254454041d6b147cfc40de8c90';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  export namespace v2executions {
    export type Table = 'v2executions';
    export interface Selectable {
      /**
      * **v2executions.id**
      * - `uuid` in database
      * - `NOT NULL`, default: `gen_random_uuid()`
      */
      id: string;
      /**
      * **v2executions.type**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      type: string;
      /**
      * **v2executions.deployment_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      deployment_id: string;
      /**
      * **v2executions.incoming_circle_id**
      * - `uuid` in database
      * - Nullable, no default
      */
      incoming_circle_id: string | null;
      /**
      * **v2executions.status**
      * - `varchar` in database
      * - `NOT NULL`, default: `'CREATED'::character varying`
      */
      status: string;
      /**
      * **v2executions.notification_status**
      * - `varchar` in database
      * - `NOT NULL`, default: `'NOT_SENT'::character varying`
      */
      notification_status: string;
      /**
      * **v2executions.created_at**
      * - `timestamp` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at: Date;
      /**
      * **v2executions.finished_at**
      * - `timestamp` in database
      * - Nullable, no default
      */
      finished_at: Date | null;
    }
    export interface Whereable {
      /**
      * **v2executions.id**
      * - `uuid` in database
      * - `NOT NULL`, default: `gen_random_uuid()`
      */
      id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **v2executions.type**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      type?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **v2executions.deployment_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      deployment_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **v2executions.incoming_circle_id**
      * - `uuid` in database
      * - Nullable, no default
      */
      incoming_circle_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **v2executions.status**
      * - `varchar` in database
      * - `NOT NULL`, default: `'CREATED'::character varying`
      */
      status?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **v2executions.notification_status**
      * - `varchar` in database
      * - `NOT NULL`, default: `'NOT_SENT'::character varying`
      */
      notification_status?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **v2executions.created_at**
      * - `timestamp` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at?: Date | db.Parameter<Date> | db.DateString | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, Date | db.Parameter<Date> | db.DateString | db.SQLFragment | db.ParentColumn>;
      /**
      * **v2executions.finished_at**
      * - `timestamp` in database
      * - Nullable, no default
      */
      finished_at?: Date | db.Parameter<Date> | db.DateString | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, Date | db.Parameter<Date> | db.DateString | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **v2executions.id**
      * - `uuid` in database
      * - `NOT NULL`, default: `gen_random_uuid()`
      */
      id?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment;
      /**
      * **v2executions.type**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      type: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **v2executions.deployment_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      deployment_id: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **v2executions.incoming_circle_id**
      * - `uuid` in database
      * - Nullable, no default
      */
      incoming_circle_id?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **v2executions.status**
      * - `varchar` in database
      * - `NOT NULL`, default: `'CREATED'::character varying`
      */
      status?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment;
      /**
      * **v2executions.notification_status**
      * - `varchar` in database
      * - `NOT NULL`, default: `'NOT_SENT'::character varying`
      */
      notification_status?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment;
      /**
      * **v2executions.created_at**
      * - `timestamp` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at?: Date | db.Parameter<Date> | db.DateString | db.DefaultType | db.SQLFragment;
      /**
      * **v2executions.finished_at**
      * - `timestamp` in database
      * - Nullable, no default
      */
      finished_at?: Date | db.Parameter<Date> | db.DateString | null | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **v2executions.id**
      * - `uuid` in database
      * - `NOT NULL`, default: `gen_random_uuid()`
      */
      id?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.DefaultType | db.SQLFragment>;
      /**
      * **v2executions.type**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      type?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **v2executions.deployment_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      deployment_id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **v2executions.incoming_circle_id**
      * - `uuid` in database
      * - Nullable, no default
      */
      incoming_circle_id?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **v2executions.status**
      * - `varchar` in database
      * - `NOT NULL`, default: `'CREATED'::character varying`
      */
      status?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.DefaultType | db.SQLFragment>;
      /**
      * **v2executions.notification_status**
      * - `varchar` in database
      * - `NOT NULL`, default: `'NOT_SENT'::character varying`
      */
      notification_status?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.DefaultType | db.SQLFragment>;
      /**
      * **v2executions.created_at**
      * - `timestamp` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at?: Date | db.Parameter<Date> | db.DateString | db.DefaultType | db.SQLFragment | db.SQLFragment<any, Date | db.Parameter<Date> | db.DateString | db.DefaultType | db.SQLFragment>;
      /**
      * **v2executions.finished_at**
      * - `timestamp` in database
      * - Nullable, no default
      */
      finished_at?: Date | db.Parameter<Date> | db.DateString | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, Date | db.Parameter<Date> | db.DateString | null | db.DefaultType | db.SQLFragment>;
    }
    export interface JSONSelectable extends JSONSelectableFromSelectable<Selectable> { }
    export type UniqueIndex = 'unique_executions_id';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /* === cross-table types === */

  export type Table = cd_configurations.Table | schema_migrations.Table | v2components.Table | v2deployments.Table | v2executions.Table;
  export type Selectable = cd_configurations.Selectable | schema_migrations.Selectable | v2components.Selectable | v2deployments.Selectable | v2executions.Selectable;
  export type Whereable = cd_configurations.Whereable | schema_migrations.Whereable | v2components.Whereable | v2deployments.Whereable | v2executions.Whereable;
  export type Insertable = cd_configurations.Insertable | schema_migrations.Insertable | v2components.Insertable | v2deployments.Insertable | v2executions.Insertable;
  export type Updatable = cd_configurations.Updatable | schema_migrations.Updatable | v2components.Updatable | v2deployments.Updatable | v2executions.Updatable;
  export type UniqueIndex = cd_configurations.UniqueIndex | schema_migrations.UniqueIndex | v2components.UniqueIndex | v2deployments.UniqueIndex | v2executions.UniqueIndex;
  export type Column = cd_configurations.Column | schema_migrations.Column | v2components.Column | v2deployments.Column | v2executions.Column;
  export type AllTables = [cd_configurations.Table, schema_migrations.Table, v2components.Table, v2deployments.Table, v2executions.Table];
  export type AllMaterializedViews = [];


  export type SelectableForTable<T extends Table> = {
    cd_configurations: cd_configurations.Selectable;
    schema_migrations: schema_migrations.Selectable;
    v2components: v2components.Selectable;
    v2deployments: v2deployments.Selectable;
    v2executions: v2executions.Selectable;
  }[T];

  export type WhereableForTable<T extends Table> = {
    cd_configurations: cd_configurations.Whereable;
    schema_migrations: schema_migrations.Whereable;
    v2components: v2components.Whereable;
    v2deployments: v2deployments.Whereable;
    v2executions: v2executions.Whereable;
  }[T];

  export type InsertableForTable<T extends Table> = {
    cd_configurations: cd_configurations.Insertable;
    schema_migrations: schema_migrations.Insertable;
    v2components: v2components.Insertable;
    v2deployments: v2deployments.Insertable;
    v2executions: v2executions.Insertable;
  }[T];

  export type UpdatableForTable<T extends Table> = {
    cd_configurations: cd_configurations.Updatable;
    schema_migrations: schema_migrations.Updatable;
    v2components: v2components.Updatable;
    v2deployments: v2deployments.Updatable;
    v2executions: v2executions.Updatable;
  }[T];

  export type UniqueIndexForTable<T extends Table> = {
    cd_configurations: cd_configurations.UniqueIndex;
    schema_migrations: schema_migrations.UniqueIndex;
    v2components: v2components.UniqueIndex;
    v2deployments: v2deployments.UniqueIndex;
    v2executions: v2executions.UniqueIndex;
  }[T];

  export type ColumnForTable<T extends Table> = {
    cd_configurations: cd_configurations.Column;
    schema_migrations: schema_migrations.Column;
    v2components: v2components.Column;
    v2deployments: v2deployments.Column;
    v2executions: v2executions.Column;
  }[T];

  export type SQLForTable<T extends Table> = {
    cd_configurations: cd_configurations.SQL;
    schema_migrations: schema_migrations.SQL;
    v2components: v2components.SQL;
    v2deployments: v2deployments.SQL;
    v2executions: v2executions.SQL;
  }[T];

}
